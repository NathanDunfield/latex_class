%%%  Code for graphics.  
%%%
%%%  Two options: tikz and xy

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{nmd/graphics}[2014/08/31 - Semester start edition]
\RequirePackage{nmd/common}
\newboolean{tikz}
\newboolean{xy}
\DeclareOption{xy}{\xytrue}
\DeclareOption{tikz}{\tikztrue}
\ProcessOptions

%%% Always load the basics
\RequirePackage{graphicx, color}
\RequirePackage{xcolor}
\definecolor{nmdlight}{cmyk}{0.128, 0.176, 0.0, 0.0}
\definecolor{nmdmedium}{cmyk}{0.41, 0.49, 0.06, 0.0}
\definecolor{nmddark}{rgb}{0.1, 0.0, 0.5}

%%% TikZ addons  

\iftikz 
\RequirePackage{tikz}
\usetikzlibrary{calc}
\usetikzlibrary{positioning}
\usetikzlibrary{intersections}
\usetikzlibrary{arrows.meta}
\usetikzlibrary{decorations.markings}
\usetikzlibrary{decorations.pathreplacing}

% USAGE:  \begin{tikzoverlay}[<graphics opts>]{file name}[tikz opts]
%              (tikz commands in coordinate system where horizontal
%              direction is 100)
%              \end{tikzoverlay}
%
% The variant tikzoverlayabs uses coordinates going from (0,0) to (1,1).
%
% Modeled on 
%
% http://bazaar.launchpad.net/~tex-sx/tex-sx/development/view/head:/onimage.dtx

\def\tikzoverlay{%
    \pgfutil@ifnextchar[{\tikzoverlay@opt}{\tikzoveraly@opt[]}%
}
\def\tikzoverlay@opt[#1]#2{%
    \begin{tikzpicture}
        \node[anchor=south west, inner sep=0] (image) at (0,0) {\includegraphics[#1]{#2}};
        \newdimen\nmd@tikzoverlaywidth
        \pgfextractx{\nmd@tikzoverlaywidth}{\pgfpointanchor{image}{south east}}
        \begin{scope}
          \tikzset{x=0.01\nmd@tikzoverlaywidth}
          \tikzset{y=0.01\nmd@tikzoverlaywidth}
}
\def\endtikzoverlay{%
    \end{scope}
    \end{tikzpicture}
}

\def\tikzoverlayabs{%
    \pgfutil@ifnextchar[{\tikzoverlayabs@opt}{\tikzoveralyabs@opt[]}%
}
\def\tikzoverlayabs@opt[#1]#2{%
    \begin{tikzpicture}
        \node[anchor=south west, inner sep=0] (image) at (0,0) {\includegraphics[#1]{#2}};
        \begin{scope}
          \tikzset{x=(image.south east)}
          \tikzset{y=(image.north west)}
}
\def\endtikzoverlayabs{%
    \end{scope}
    \end{tikzpicture}
}

%%%  Including Matplotlib figures with TikZ overlay 

\pgfkeys{
  /matplotlibfigure/.is family, /matplotlibfigure, 
  default/.style = {width = 0.95\textwidth, font = \footnotesize}, 
  width/.store in = \matplotlibfigurewidth,
  font/.store in = \matplotlibfigurefont,
}

\newcommand{\matplotlibfigure}[2][]{%
 \pgfkeys{/matplotlibfigure, default, #1}%
 \input{plots/#2}
}


% Basic default for all my TikZ pictures
\tikzset{%
  nmdstd/.style={%
    line join=round,
    line cap=round,
    font=\footnotesize, 
    % My preferred arrow has length 1pt + 5*(line width) and 
    % width equal to its height.
    >={Computer Modern Rightarrow[length=1pt 5, width'=0pt 1]},
  }
}

% Default style for labels on subfigures
\tikzset{%
  subfig label/.style={%
    font=\small
  }
}

% Draw an arrow somewhere along a path
\tikzset{%
  mid arrow/.style={postaction={
        decorate,
        decoration={markings,
                    mark=at position #1 with {\arrow{>}}}
        }}
}

% Add a coordinate somewhere along a path
\tikzset{%
  add coordinate/.style 2 args={postaction={
        decorate,
        decoration={markings,
                    mark=at position #1 with {\coordinate (#2);}}
        }}
}

% Show the control points for the Bezier curves
\tikzset{%
  show controls/.style={
    postaction={
      decoration={
        show path construction,
        curveto code={
          \draw [blue, -] 
            (\tikzinputsegmentfirst) -- (\tikzinputsegmentsupporta)
            (\tikzinputsegmentlast) -- (\tikzinputsegmentsupportb);
          \fill [red, opacity=0.5] 
            (\tikzinputsegmentsupporta) circle [radius=.5ex]
            (\tikzinputsegmentsupportb) circle [radius=.5ex];
        }
      },
      decorate
}}} 

% Add a tangent vector along a curve
\tikzset{%
  tangent vector/.style 2 args={
    postaction={
      decorate,
      decoration={markings,
         mark=at position #1 with {\draw (0, 0) -- (#2, 0);}}
      }}
}

% Add a normal vector along a curve
\tikzset{%
  normal vector/.style 2 args={
    postaction={
      decorate,
      decoration={markings,
         mark=at position #1 with {\draw (0, 0) -- (0, #2);}}
      }}
}

% Add a vector along a curve
\tikzset{%
    vector along/.style 2 args={
    postaction={
      decorate,
      decoration={markings,
         mark=at position #1 with {\draw (0, 0) -- #2;}}
      }}
}


% Specifying Bezier curves in a relatively comprehensible way.
\newcommand{\easybezier}[6]{%
  #1 .. controls ($#1!#4!#3:#2$) and ($#2!#6!#5:#1$) .. #2
}

% Drawing a grid in the upper quadrant to measure stuff against

\newcommand{\measurementgrid}[2]{%
  \begin{scope}
    \begin{scope}[line width=0.2pt, color=blue!30]
      \draw[dashed, step=0.5] (0, 0) grid (#1, #2);
      \draw[step=1]  (0, 0) grid (#1, #2);
    \end{scope}
    \begin{scope}[font=\scriptsize, color=black!40]
      \foreach \x in {0,1,...,#1}{
        \node[below] at (\x, 0) {\x};
      }
      \foreach \y in {0,1,...,#2}{
        \node[left] at (0,\y) {\y};
      }
    \end{scope}
  \end{scope}
}


\fi  % End \iftikz



% Nathan's XY-pic based label overlay environment.  The usual version
% is the second one below.  Args are: coor system, graphics modifiers,
% graphics name.  Deprecated.
\ifxy
  \RequirePackage[all,import,rotate]{xy}
   \newenvironment{xyoverpic}[3]
    {%
    \begin{xy}
    \xyimport#1{\includegraphics[#2]{#3}}
    }{\end{xy}}

  \newenvironment{cxyoverpic}[3]
  {%
    \begin{center}
      \centering\leavevmode\small
      \begin{xyoverpic}{#1}{#2}{#3}
      }{\end{xyoverpic}
    \end{center}}
\fi 


